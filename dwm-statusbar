#!/bin/bash
#
# ~/.dwm-statusbar
#
# Status bar for dwm. Expanded from:
# https://bitbucket.org/jasonwryan/eeepc/src/73dadb289dead8ef17ef29a9315ba8f1706927cb/Scripts/dwm-status
# and edited from:
# https://github.com/w0ng/bin/blob/master/dwm-statusbar

# Colour codes from dwm/config.h
colour_gry="\x01" # grey on black
colour_wht="\x02" # white on black
colour_dgry="\x04" # darkgrey on black
colour_blk="\x05" # black on darkgrey
colour_red="\x06" # colour_red on black
colour_grn="\x07" # green on black
colour_dylw="\x08" # orange on black
colour_ylw="\x09" # yellow on black
colour_blu="\x0A" # colour_blue on darkgrey
colour_mag="\x0B" # colour_magenta on darkgrey
colour_cyn="\x0C" # cyan on darkgrey

# Icon glyphs from font xbmicons.pcf
glyph_cpu="\uE00F"
glyph_mem="\uE010"
glyph_dl="\uE011"
glyph_ul="\uE012"
glyph_bat=""
glyph_vol="\uE015"
glyph_tim="\uE016"
glyph_temp="\uE017"
sep_solid="\uE01A"
sep_line="\uE01B"

compare_float() {
  awk -v n1=$1 -v n2=$2 'BEGIN{ if (n1<n2) exit 0; exit 1}'
}

print_temperature() {
  temperature="$(acpi -t | tr -d ',' | awk '{print $4}')"
  if compare_float $temperature 55 ; then
    echo -ne "${colour_cyn} ${glyph_temp} ${temperature}*C "
  else
    echo -ne "${colour_red} ${glyph_temp} ${temperature}*C "
  fi
}

print_battery() {
  state="$(acpi -b | tr -d ',' | awk '{print $3}')"
  battery="$(acpi -b | tr -d ',%' | awk '{print $4}')"

  if [ "$battery" -gt "20" ]; then
    glyph_bat="\uE005"
  else
    glyph_bat="\uE002"
  fi

  if [ "$state" == "Charging" ]; then
    echo -ne "${colour_grn} ${glyph_bat} ${battery}% "
  elif [ "$battery" -lt "20" ]; then
    echo -ne "${colour_red} ${glyph_bat} ${battery}% "
  else
    echo -ne "${colour_cyn} ${glyph_bat} ${battery}% "
  fi
}

print_mem_used() {
  mem_used="$(free -m | awk 'NR==2 {print $3}')"
  echo -ne "${colour_cyn} ${glyph_mem} ${mem_used}M "
}

print_volume() {
  volume="$(amixer get Master | tail -n1 | sed -r 's/.*\[(.*)%\].*/\1/')"
  echo -ne "${colour_cyn} ${glyph_vol} ${volume}% "
}

print_datetime() {
  datetime="$(date "+%a %d %b ${sep_line} %H:%M")"
  echo -ne "${colour_wht} ${glyph_tim} ${datetime} "
}

suspend_on_low_battery_level() {
  state="$(acpi -b | tr -d ',' | awk '{print $3}')"
  battery="$(acpi -b | tr -d ',' | awk '{print $4}')"

  if [ "$state" == "Discharging" ]; then
    if [ "$battery" == "3%" ]; then
      systemctl suspend
    elif [ "$battery" == "2%" ]; then
      systemctl suspend
    elif [ "$battery" == "1%" ]; then
      systemctl hibernate
    fi
  fi
}

# network (from: http://dzen.geekmode.org/dwiki/doku.php?id=dzen:network-meter)
# cpu (from: https://bbs.archlinux.org/viewtopic.php?pid=661641#p661641)
rx_old=$(($(cat /sys/class/net/enp9s0/statistics/rx_bytes) + $(cat /sys/class/net/wlp7s0/statistics/rx_bytes)))
tx_old=$(($(cat /sys/class/net/enp9s0/statistics/tx_bytes) + $(cat /sys/class/net/wlp7s0/statistics/tx_bytes)))

while true; do
  # get new cpu idle and total usage
  eval $(awk '/^cpu /{print "cpu_idle_now=" $5 "; cpu_total_now=" $2+$3+$4+$5 }' /proc/stat)
  cpu_interval=$((cpu_total_now-${cpu_total_old:-0}))
  # calculate cpu usage (%)
  let cpu_used="100 * ($cpu_interval - ($cpu_idle_now-${cpu_idle_old:-0})) / $cpu_interval"

  # get new rx/tx counts
  rx_now=$(($(cat /sys/class/net/enp9s0/statistics/rx_bytes) + $(cat /sys/class/net/wlp7s0/statistics/rx_bytes)))
  tx_now=$(($(cat /sys/class/net/enp9s0/statistics/tx_bytes) + $(cat /sys/class/net/wlp7s0/statistics/tx_bytes)))
  # calculate the rate (K) and total (M)
  let rx_rate=($rx_now-$rx_old)/1024
  let tx_rate=($tx_now-$tx_old)/1024

  # output vars
  print_cpu_used() {
    if [ "$cpu_used" -gt "50" ]; then
      echo -ne "${colour_red}${glyph_cpu} ${cpu_used}% "
    else
      echo -ne "${colour_cyn}${glyph_cpu} ${cpu_used}% "
    fi
  }
  print_rx_rate() {
    echo -ne "${colour_grn} ${glyph_dl} ${rx_rate}K "
  }
  print_tx_rate() {
    echo -ne "${colour_cyn} ${glyph_ul} ${tx_rate}K "
  }

  # Pipe to status bar, not indented due to printing extra spaces/tabs
  xsetroot -name "\
$(print_cpu_used)\
$(print_mem_used)\
$(print_rx_rate)\
$(print_tx_rate)\
$(print_temperature)\
$(print_battery)\
$(print_volume)\
$(print_datetime)"

  # Suspend on low battery level
  suspend_on_low_battery_level

  # reset old rates
  rx_old=$rx_now
  tx_old=$tx_now
  cpu_idle_old=$cpu_idle_now
  cpu_total_old=$cpu_total_now
  # loop stats every 1 second
  sleep 1
done